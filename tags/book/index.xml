<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>book on Jaemin&#39;s blog</title>
        <link>https://kojaemin.github.io/tags/book/</link>
        <description>Recent content in book on Jaemin&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 11 Feb 2024 09:48:50 +0900</lastBuildDate><atom:link href="https://kojaemin.github.io/tags/book/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Clean Code(1)</title>
        <link>https://kojaemin.github.io/p/clean-code1/</link>
        <pubDate>Sun, 11 Feb 2024 09:48:50 +0900</pubDate>
        
        <guid>https://kojaemin.github.io/p/clean-code1/</guid>
        <description>&lt;h1 id=&#34;clean-code&#34;&gt;Clean Code&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;코드는 요구사항을 표현하는 언어이다.&lt;/li&gt;
&lt;li&gt;나쁜 코드는 초기에 생산성이 높지만 나중에는 생산성이 0에 수렴한다.&lt;/li&gt;
&lt;li&gt;좋은 코드를 사수하는 일이 프로그래머의 책임이다.
&lt;ul&gt;
&lt;li&gt;예시로 손을 씻는 행위가 시간이 오래걸린다고 하지 말라는 환자가 있다. 의사가 질병과 감염의 위험을 더 잘 알기에 거부한다. 환자의 말을 그대로 따르면 전문가 답지 못하다. 프로그래머도 마찬가지이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기한을 맞추는 유일한 방법은 언제나 코드를 최대한 깨끗하게 유지하는 습관이다. 나쁜 코드를 알아보는 것은 상대적으로 쉽지만 좋은 코드를 작성하는 것은 절제와 규율을 통한 투쟁으로 얻은 코드 감각의 결과물이다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
